[Web]

World Wide Web, W3, Web : 현대 정보 통신을 대표하는 통신 수단 중 하나
웹이란 ? : 인터넷이라는 통신망을 활용하여 구현된 전 지구적 정보 공간
 - HTTP를 이용하여 정보를 공유하는 서비스 ( 웹상에서 서로 통신을 하기 위해 정해둔 일종의 규칙
 - 웹 서버 : 정보를 제공하는 주체
 - 웹 클라이언트 : 정보를 받는 이용자

웹 서비스, 프론트엔드 & 백엔드
웹 서비스 : 이용자의 요청을 해석하고 가공하여 필요한 정보와 기능을 제공하는 능동형 서비스
프론트엔드 : 이용자의 요청을 받는 부분
백엔드 : 요청을 처리하는 부분

프론트 엔드는 이용자에게 직접 보여지는 부분으로 '웹 리소스'라는 것으로 구성
페이지가 보여주고 있는 정보들은 모두 웹 리소스에 명시되어 있다.

웹 리소스 : 웹에 갖춰진 정보 자산을 의미
ex) http://dreamhack.io/index.html >> dreamhack.io에 존재하는 /index.html 경로의 리소스를 가져오라는 의미
모든 웹 리소스는 고유의 Uniform Resource Identifier (URL)을 가지며, 이를 이용하여 식별
대표적인 웹 리소스
 - Hyper Text Markup Language (HTML) : 태그와 속성을 통한 구조화된 문서 작성 지원
 - Cascading Style Sheets (CSS) : 웹 리소스들의 시각화 방법을 기재한 스타일 시트 (웹 문서 시각화)
 - JavaScript (JS) : 웹 문서의 동작을 정의 (동작 구현)
 - 그 외 ( 문서, 이밎, 동영상, 폰트 등 )

웹 클라이언트와 서버의 통신
아래는 웹 서비스의 통신 과정 간략화
1. (클라이언트) 이용자가 브라우저를 이용하여 웹 서버에 접속
2. (클라이언트) 브라우저는 이용자의 요청을 해석하여 HTTP 형식으로 웹 서버에 리소스를 요청
3. (서버) HTTP로 전달된 이용자의 요청을 해석
4. (서버) 해석한 이용자의 요청에 따라 적절한 동작을 취함
5. (서버) 이용자에게 전달할 리소스를 HTTP 형식으로 이용자에게 전달
6. (클라이언트) 브라우저는 서버에게 응답받은 HTML, CSS, JS 등의 웹 리소스를 시각화하여 이용자에게 제공


[HTTP/HTTPS]

인코딩 : 0과 1로 문자를 표현하는 것 (일종의 약속들) >> 아스키(Ascii) & 유니코드(Unicode)
아스키 : 7비트 데이터에 대한 인코딩 표
유니코드 : 한 문자는 최대한 32개의 비트로 표현
인코딩을 통해 우리의 문장을 컴퓨터에 저장하고 표현

통신 프로토콜📃
웹 서버에 있는 리소스를 클라이언트가 받아 보려면, 클라이언트는 웹에게 특정 리소스를 지정하여 제공해달라고 요청.
서버가 해당 요청을 잏하고, 대응되는 동작을 통해 클라이언트에게 리소스를 반환하는데 여기서 클라이언트의 행위를 요청(Request), 서버의 행위를 응답(Response)이라고 함.
프로토콜은 일반적으로 규격화된 상호작용에 적용되는 약속을 말함.
컴퓨터와 통신에 있어서 비교적 엄격한 프로토콜을 사용해야 함. 왜냐하면 컴퓨터는 해석의 융통성을 발휘하는 것이 매우 어렵고, 이 과정에서 통신 오류가 발생할 가능성을 높일 수 있기 때문.
컴퓨터 통신 프로토콜은 각 통신 주체가 교환하는 데이터를 명확히 해석할 수 있도록 문법(syntax)을 포함.
문법에 어긋나는 메시지는 잘못 전송된 것으로 취급하여 무시함.
현재까지 제정된 표준 통신 프로토콜에는 네트워크 통신의 기초가 되는 TCP/IP, 웹이 사용하는 HTTP, 파일을 주고받을 때 사용하는 FTP 등 매우 많은 종류가 존재.

HTTP란 서버와 클라이언트의 데이터 교환을 요청과 응답 형식으로 정의한 프로토콜
기본 메커니즘은 클라이언트가 서버에게 요청하면, 서버가 응답하는 것.
웹 서버는 HTTP 서버를 HTTP 서비스 포트에 대기시키고 이 포트는 일반적으로 TCP/80 or TCP/8080
클라이언트가 서비스 포트에 HTTP 요청을 전송하면, 이를 해석하여 적절한 응답으로 반환.

네트워크 포트 : 네트워크에서 서버와 클라이언트가 정보를 교환하는 추상회단 장소 ( 일명 포트 )
서비스 포트 : 네트워크 포토 중에서 특정 서비스가 점유하고 있는 포트 ex) HTTP가 80번 포트를 점유하고 있다면 HTTP의 서비스 포트는 80번 포트가 됨.
포트로 데이터를 교환하는 방식은 전송 계층의 프로토콜을 따름. 대표적으로 TCP와 UDP가 있음
TCP로 데이터를 전송하려는 서비스에 UDP 클라이언트가 접근하면, 데이터가 교환되지 않음. 반대의 경우도 마찬가지
서비스 포트를 표기할 때는 전송 계층 프로토콜을 같이 표기하기도 함.
현대의 윈도우나 리눅스, 맥 운영체제는 0번 부터 65535번까지,, 총 65536개의 같은 수의 네트워크 포트를 사용함.

포트 중 0번부터 1023번 포트는 잘 알려진 포트(Well-known port) 또는 특권 포트(Privileged port)라고 함.
대표적으로 22번 포트에는 SSH, 80에는 HTTP, 443에는 HTTPS가 할당되어 있는 것 처럼 각 폰트 번호에 유명한 서비스가 등록되어 있음.
잘 알려진 포트에 서비스를 실행하려면 관리자 권한이 필요함으로 클라이언트는 이 대역에서 실행 중인 서비스들은 관리자의 것이라고 신뢰할 수 있음.

HTTP 메시지에는 클라이언트가 전송하는 HTTP 요청, 그리고 서버가 반환하는 HTTP 응답이 있음.
이들은 HTTP 헤더와 바디로 구성된다는 공통점이 존재

HTTP 헤더
- 각 줄은 CRLF로 구분되며, 첫 줄은 시작 줄, 나머지 줄은 헤더라고 부름.
- 영문 표기에서는 Headers와 Header이지만, 한국어에서는 모두 헤더로 부름.
- 헤더의 끝은 빈 줄로 나타냄.
- 필드와 값으로 구성되며 HTTP 메시지 또는 바디의 속성을 나타냄.
- 하나의 HTTP 메시지에는 0개 이상의 헤더가 있을 수 있음.

HTTP 바디
- 헤드의 끝을 나타내는 CRLF 뒤 모든 줄을 말함.
- 클라이언트나 서버에게 전송하려는 데이터가 바디에 담김.

CRLF란?
- Carriage Return (CR)와 Line Feed (LF)의 조합
- CR은 커서를 현재 줄의 맨 앞으로 이동시키는 문자
- LF는 커서를 다음 줄로 이동시키는 문자
- 이것들은 주로 텍스트 파일에서 줄 바꿈을 나타내는 데 사용되는 제어 문자열
- 윈도우 운영체제에서는 줄을 종결시키기 위해 CRLF를 사용하고, 리눅스같은 유닉스 기반 운영체제에서는 LF만을 사용.

